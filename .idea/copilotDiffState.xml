<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/setup/mod.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/setup/mod.rs" />
              <option name="originalContent" value="pub mod world;&#10;pub mod lighting;&#10;pub mod camera;&#10;pub mod assetloader;&#10;pub mod appstate;&#10;pub mod diagnostics;&#10;pub mod stresstest;&#10;pub mod gltf_spawner;&#10;pub mod timescale;&#10;&#10;use bevy::prelude::*;&#10;use appstate::AppState;&#10;&#10;pub fn register_startup_systems(app: &amp;mut App) {&#10;    app.init_resource::&lt;stresstest::StressTestConfig&gt;();&#10;    app.init_resource::&lt;diagnostics::LowestFps&gt;();&#10;    app.init_resource::&lt;diagnostics::AverageFps&gt;();&#10;    app.init_resource::&lt;timescale::TimeScaleConfig&gt;();&#10;&#10;    app.add_systems(Startup, (&#10;        assetloader::load_assets_startup,&#10;        lighting::spawn_ambient_light,&#10;        lighting::spawn_directional_light,&#10;        camera::spawn_default_camera,&#10;        diagnostics::setup_fps_overlay,&#10;        timescale::setup_timescale_ui,&#10;        world::spawn_world,&#10;    ).chain());&#10;    // Environment Map Light erst spawnen, wenn wir in Running sind&#10;}&#10;&#10;pub fn register_update_systems(app: &amp;mut App) {&#10;    // Systems that run during Loading state&#10;    app.add_systems(&#10;        Update,&#10;        check_assets_loaded_transition.run_if(in_state(AppState::Loading))&#10;    );&#10;&#10;    // Systems that always run&#10;    app.add_systems(Update, (&#10;        diagnostics::update_fps_text,&#10;        diagnostics::update_average_fps_text,&#10;        diagnostics::update_lowest_fps_text,&#10;        diagnostics::update_state_text,&#10;        diagnostics::update_loading_progress,&#10;        diagnostics::update_stress_test_info_text,&#10;        stresstest::stress_test_input,&#10;        stresstest::update_stress_test_info,&#10;        gltf_spawner::toggle_physics_debug,&#10;        lighting::ensure_environment_map_light_once,&#10;        world::spawn_ambience_when_ready,&#10;        timescale::timescale_input,&#10;        timescale::apply_timescale,&#10;        timescale::update_timescale_text,&#10;    ));&#10;&#10;    // Radiale Gravitation im Running state&#10;    app.add_systems(&#10;        Update,&#10;        world::apply_radial_gravity.run_if(in_state(AppState::Running))&#10;    );&#10;&#10;    // Systems that only run when Running&#10;    app.add_systems(&#10;        OnEnter(AppState::Running),&#10;        (&#10;            world::spawn_initial_objects.run_if(resource_exists::&lt;assetloader::LoadedModels&gt;),&#10;            lighting::spawn_environment_map_light,&#10;            setup_complete_log,&#10;        )&#10;    );&#10;&#10;    // Stresstest läuft nur im Running state&#10;    app.add_systems(&#10;        Update,&#10;        stresstest::spawn_stress_test_objects&#10;            .run_if(in_state(AppState::Running))&#10;            .run_if(resource_exists::&lt;assetloader::LoadedModels&gt;)&#10;    );&#10;}&#10;&#10;fn setup_complete_log() {&#10;    info!(&quot; Setup complete - simulation starting!&quot;);&#10;}&#10;&#10;fn check_assets_loaded_transition(&#10;    asset_handles: Option&lt;Res&lt;crate::setup::assetloader::AssetHandles&gt;&gt;,&#10;    asset_server: Res&lt;AssetServer&gt;,&#10;    mut next_state: ResMut&lt;NextState&lt;AppState&gt;&gt;,&#10;) {&#10;    if let Some(handles_res) = asset_handles {&#10;        let handles = &amp;handles_res.0;&#10;        if handles.is_empty() {&#10;            info!(&quot;No assets to load, transitioning to Running&quot;);&#10;            next_state.set(AppState::Running);&#10;            return;&#10;        }&#10;&#10;        // Check if all assets are loaded&#10;        let all_loaded = handles.iter().all(|handle| {&#10;            matches!(&#10;                asset_server.get_load_state(handle.id()),&#10;                Some(bevy::asset::LoadState::Loaded)&#10;            )&#10;        });&#10;&#10;        if all_loaded {&#10;            info!(&quot;✅ All assets loaded successfully! Transitioning to Running state&quot;);&#10;            next_state.set(AppState::Running);&#10;        }&#10;    } else {&#10;        // No resource present; treat as no assets&#10;        info!(&quot;No asset handles found, transitioning to Running&quot;);&#10;        next_state.set(AppState::Running);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="pub mod world;&#10;pub mod lighting;&#10;pub mod camera;&#10;pub mod assetloader;&#10;pub mod appstate;&#10;pub mod diagnostics;&#10;pub mod stresstest;&#10;pub mod gltf_spawner;&#10;&#10;use bevy::prelude::*;&#10;use appstate::AppState;&#10;&#10;pub fn register_startup_systems(app: &amp;mut App) {&#10;    app.init_resource::&lt;stresstest::StressTestConfig&gt;();&#10;    app.init_resource::&lt;diagnostics::LowestFps&gt;();&#10;    app.init_resource::&lt;diagnostics::AverageFps&gt;();&#10;&#10;    app.add_systems(Startup, (&#10;        assetloader::load_assets_startup,&#10;        lighting::spawn_ambient_light,&#10;        lighting::spawn_directional_light,&#10;        camera::spawn_default_camera,&#10;        diagnostics::setup_fps_overlay,&#10;        world::spawn_world,&#10;    ).chain());&#10;    // Environment Map Light erst spawnen, wenn wir in Running sind&#10;}&#10;&#10;pub fn register_update_systems(app: &amp;mut App) {&#10;    // Systems that run during Loading state&#10;    app.add_systems(&#10;        Update,&#10;        check_assets_loaded_transition.run_if(in_state(AppState::Loading))&#10;    );&#10;&#10;    // Systems that always run&#10;    app.add_systems(Update, (&#10;        diagnostics::update_fps_text,&#10;        diagnostics::update_average_fps_text,&#10;        diagnostics::update_lowest_fps_text,&#10;        diagnostics::update_state_text,&#10;        diagnostics::update_loading_progress,&#10;        diagnostics::update_stress_test_info_text,&#10;        stresstest::stress_test_input,&#10;        stresstest::update_stress_test_info,&#10;        gltf_spawner::toggle_physics_debug,&#10;        lighting::ensure_environment_map_light_once,&#10;        world::spawn_ambience_when_ready,&#10;    ));&#10;&#10;    // Radiale Gravitation im Running state&#10;    app.add_systems(&#10;        Update,&#10;        world::apply_radial_gravity.run_if(in_state(AppState::Running))&#10;    );&#10;&#10;    // Systems that only run when Running&#10;    app.add_systems(&#10;        OnEnter(AppState::Running),&#10;        (&#10;            world::spawn_initial_objects.run_if(resource_exists::&lt;assetloader::LoadedModels&gt;),&#10;            lighting::spawn_environment_map_light,&#10;            setup_complete_log,&#10;        )&#10;    );&#10;&#10;    // Stresstest läuft nur im Running state&#10;    app.add_systems(&#10;        Update,&#10;        stresstest::spawn_stress_test_objects&#10;            .run_if(in_state(AppState::Running))&#10;            .run_if(resource_exists::&lt;assetloader::LoadedModels&gt;)&#10;    );&#10;}&#10;&#10;fn setup_complete_log() {&#10;    info!(&quot; Setup complete - simulation starting!&quot;);&#10;}&#10;&#10;fn check_assets_loaded_transition(&#10;    asset_handles: Option&lt;Res&lt;crate::setup::assetloader::AssetHandles&gt;&gt;,&#10;    asset_server: Res&lt;AssetServer&gt;,&#10;    mut next_state: ResMut&lt;NextState&lt;AppState&gt;&gt;,&#10;) {&#10;    if let Some(handles_res) = asset_handles {&#10;        let handles = &amp;handles_res.0;&#10;        if handles.is_empty() {&#10;            info!(&quot;No assets to load, transitioning to Running&quot;);&#10;            next_state.set(AppState::Running);&#10;            return;&#10;        }&#10;&#10;        // Check if all assets are loaded&#10;        let all_loaded = handles.iter().all(|handle| {&#10;            matches!(&#10;                asset_server.get_load_state(handle.id()),&#10;                Some(bevy::asset::LoadState::Loaded)&#10;            )&#10;        });&#10;&#10;        if all_loaded {&#10;            info!(&quot;✅ All assets loaded successfully! Transitioning to Running state&quot;);&#10;            next_state.set(AppState::Running);&#10;        }&#10;    } else {&#10;        // No resource present; treat as no assets&#10;        info!(&quot;No asset handles found, transitioning to Running&quot;);&#10;        next_state.set(AppState::Running);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>